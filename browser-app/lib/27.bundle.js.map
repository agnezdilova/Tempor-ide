{"version":3,"sources":["webpack:///../dsm-wrapper/src/browser/dsm-menu-contribution.ts","webpack:///../dsm-wrapper/src/browser/dsm-wrapper-client.ts","webpack:///../dsm-wrapper/src/browser/dsm-wrapper-frontend-module.ts","webpack:///../dsm-wrapper/src/common/dsm-wrapper-protocols.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qGAA+C;AAC/C,oHAAyH;AACzH,+IAAoE;AACpE,mKAAoF;AAIpF;IAAA;IAiCA,CAAC;IAvBS,2CAAa,GAAnB,UAAoB,KAAwB;;;;;;;wBAClC,QAAQ,GAAG,CAAC,wBAAwB,EAAE,kBAAkB,EAAE,eAAe,CAAC,CAAC;wBAEjF,iDAAiD;wBACjD,KAAK,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;wBAEvB,qBAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE;;wBAAhD,OAAO,GAAG,SAAsC;wBACtD,OAAO,CAAC,OAAO,CAAC,gBAAM;4BAClB,IAAM,OAAO,GAAY;gCACrB,EAAE,EAAE,MAAM;gCACV,KAAK,EAAE,MAAM;6BAChB;4BACD,IAAI,UAAU,GAAG,IAAI,4CAAsB,CAAQ,KAAI,CAAC,gBAAgB,EAAE;gCACtE,OAAO,EAAE,UAAC,GAAU;oCAChB,KAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,QAAQ,EAAE,EAAd,CAAc,CAAC,CAAC;gCAC5E,CAAC;gCACD,SAAS,EAAE,UAAC,GAAU,IAAK,UAAG,CAAC,KAAK,CAAC,CAAC,eAAK,IAAI,YAAK,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAjC,CAAiC,CAAC,CAAC,EAAvD,CAAuD;gCAClF,SAAS,EAAE,UAAC,GAAU,IAAK,UAAG,CAAC,KAAK,CAAC,CAAC,eAAK,IAAI,YAAK,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAjC,CAAiC,CAAC,CAAC,EAAvD,CAAuD;6BACrF,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;4BACpB,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;4BACnD,KAAK,CAAC,kBAAkB,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;wBAClE,CAAC,CAAC,CAAC;;;;;KACN;IA9BD;QADC,kBAAM,CAAC,wBAAe,CAAC;kCACN,wBAAe;yDAAC;IAGlC;QADC,kBAAM,CAAC,yCAAiB,CAAC;;iEACkB;IAG5C;QADC,kBAAM,CAAC,yBAAgB,CAAC;kCACC,yBAAgB;iEAAC;IARlC,mBAAmB;QAD/B,sBAAU,EAAE;OACA,mBAAmB,CAiC/B;IAAD,0BAAC;CAAA;AAjCY,kDAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPhC,qGAA+C;AAE/C,uGAA6C;AAG7C;IACI,0BAC6C,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IACvE,CAAC;IAEL,wCAAa,GAAb,UAAc,OAAe;QACzB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,GAAG,oBAAoB,CAAC,CAAC;IAC7D,CAAC;IAED,8CAAmB,GAAnB,UAAoB,OAAe,EAAE,MAAW;QAC5C,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,mBAAmB,GAAG,OAAO,GAAG,IAAI,GAAG,MAAM,CAAC,CAAC;IAC7E,CAAC;IAED,8CAAmB,GAAnB,UAAoB,OAAe,EAAE,MAAc;QAC/C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAK,OAAO,2BAAwB,MAAS,CAAC,CAAC;IAC3E,CAAC;IAfQ,gBAAgB;QAD5B,sBAAU,EAAE;QAGJ,6BAAM,CAAC,qBAAc,CAAC;yCAAkC,qBAAc;OAFlE,gBAAgB,CAgB5B;IAAD,uBAAC;CAAA;AAhBY,4CAAgB;;;;;;;;;;;;;;;ACL7B,qGAA4C;AAC5C,+HAAwD;AACxD,+IAA2F;AAC3F,uHAAsE;AACtE,uGAA+C;AAC/C,wIAA8D;AAE9D,kBAAe,IAAI,2BAAe,CAAC,cAAI;IACnC,IAAI,CAAC,uBAAgB,CAAC,CAAC,EAAE,CAAC,2CAAmB,CAAC,CAAC,gBAAgB,EAAE,CAAC;IAElE,IAAI,CAAC,qCAAgB,CAAC,CAAC,MAAM,EAAE,CAAC,gBAAgB,EAAE;IAClD,IAAI,CAAC,yCAAiB,CAAC,CAAC,cAAc,CAAC,aAAG;QACtC,IAAM,UAAU,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,qCAA2B,CAAC,CAAC;QAClE,IAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,qCAAgB,CAAC,CAAC;QACnD,OAAO,UAAU,CAAC,WAAW,CAAoB,6CAAqB,EAAE,MAAM,CAAC,CAAC;IACpF,CAAC,CAAC,CAAC,gBAAgB,EAAE,CAAC;AAC1B,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;ACdH,8CAA8C;AACjC,qBAAa,GAAG,sBAAsB,CAAC;AAEvC,6BAAqB,GAAG,sBAAsB,CAAC;AAE/C,yBAAiB,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC","file":"27.bundle.js","sourcesContent":["import { inject, injectable } from \"inversify\";\nimport { Command, CommandRegistry, MenuContribution, MenuModelRegistry, SelectionService } from \"@theia/core/lib/common\";\nimport { IDSMWrapperServer } from \"../common/dsm-wrapper-protocols\";\nimport { UriAwareCommandHandler } from '@theia/core/lib/common/uri-command-handler';\nimport URI from \"@theia/core/lib/common/uri\";\n\n@injectable()\nexport class DSMMenuContribution implements MenuContribution {\n    @inject(CommandRegistry)\n    private commands: CommandRegistry;\n\n    @inject(IDSMWrapperServer)\n    private dsmWrapperServer: IDSMWrapperServer;\n\n    @inject(SelectionService)\n    private selectionService: SelectionService;\n\n    async registerMenus(menus: MenuModelRegistry): Promise<void> {\n        const menuPath = [\"navigator-context-menu\", \"dynamic-sub-menu\", \"dsm-sub-group\"];\n\n        // register sub menu to show our DSM menu actions\n        menus.registerSubmenu(menuPath, \"DSM\");\n\n        const configs = await this.dsmWrapperServer.scanDSMs();\n        configs.forEach(config => {\n            const command: Command = {\n                id: config,\n                label: config\n            }\n            let cmdHandler = new UriAwareCommandHandler<URI[]>(this.selectionService, {\n                execute: (uri: URI[]) => {\n                    this.dsmWrapperServer.runDSM(command.id, uri.map(uri => uri.toString()))\n                },\n                isEnabled: (uri: URI[]) => uri.every((value => value.toString().endsWith('post'))),\n                isVisible: (uri: URI[]) => uri.every((value => value.toString().endsWith('post')))\n            }, { multi: true });\n            this.commands.registerCommand(command, cmdHandler);\n            menus.registerMenuAction(menuPath, { commandId: command.id });\n        });\n    }\n}","import { inject, injectable } from \"inversify\";\nimport { IDSMWrapperClient } from \"../common/dsm-wrapper-protocols\";\nimport { MessageService } from \"@theia/core\";\n\n@injectable()\nexport class DSMWrapperClient implements IDSMWrapperClient {\n    constructor(\n        @inject(MessageService) private readonly messageService: MessageService\n    ) { }\n\n    onDSMLaunched(dsmName: string): void {\n        this.messageService.info(dsmName + \" has been launched\");\n    }\n\n    onFailedToLaunchDSM(dsmName: string, reason: any): void {\n        this.messageService.error(\"Failed to launch \" + dsmName + \": \" + reason);\n    }\n\n    onDSMResultReceived(dsmName: string, result: string): void {\n        this.messageService.info(`${ dsmName } finished working: ${ result }`);\n    }\n}\n\n","import { ContainerModule } from \"inversify\";\nimport { DSMWrapperClient } from \"./dsm-wrapper-client\";\nimport { dsmWrapperServicePath, IDSMWrapperServer } from \"../common/dsm-wrapper-protocols\";\nimport { WebSocketConnectionProvider } from \"@theia/core/lib/browser\";\nimport { MenuContribution } from \"@theia/core\";\nimport { DSMMenuContribution } from \"./dsm-menu-contribution\";\n\nexport default new ContainerModule(bind => {\n    bind(MenuContribution).to(DSMMenuContribution).inSingletonScope();\n\n    bind(DSMWrapperClient).toSelf().inSingletonScope()\n    bind(IDSMWrapperServer).toDynamicValue(ctx => {\n        const connection = ctx.container.get(WebSocketConnectionProvider);\n        const client = ctx.container.get(DSMWrapperClient);\n        return connection.createProxy<IDSMWrapperServer>(dsmWrapperServicePath, client);\n    }).inSingletonScope();\n});\n","import { JsonRpcServer } from '@theia/core/lib/common/messaging';\n\n// TODO: Find a way to get root dir without it\nexport const postTheiaRoot = '/home/vlad/post_ide/';\n\nexport const dsmWrapperServicePath = '/services/dsmWrapper';\n\nexport const IDSMWrapperServer = Symbol('IDSMWrapperServer');\n\nexport interface IDSMWrapperServer extends JsonRpcServer<IDSMWrapperClient> {\n    scanDSMs(): Promise<string[]>;\n\n    runDSM(id: string, uri: string[], serializedParameters?: string): Promise<void>;\n}\n\nexport interface IDSMWrapperClient {\n    onDSMLaunched(dsmName: string): void;\n\n    onFailedToLaunchDSM(dsmName: string, reason: any): void;\n\n    onDSMResultReceived(dsmName: string, result: string): void;\n}\n\nexport interface DSMConfiguration {\n    id: string;\n    name: string;\n    parameters: Object;\n}\n"],"sourceRoot":""}